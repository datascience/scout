package eu.scape_project.watch.dao;

import java.util.Date;
import java.util.List;

import eu.scape_project.watch.domain.Measurement;
import eu.scape_project.watch.domain.Property;
import eu.scape_project.watch.domain.PropertyValue;
import eu.scape_project.watch.domain.Source;
import eu.scape_project.watch.domain.SourceAdaptor;
import eu.scape_project.watch.domain.SourceAdaptorEvent;

/**
 * {@link SourceAdaptorEvent} Data Access Object.
 * 
 * @author Luis Faria <lfaria@keep.pt>
 * 
 */
public final class SourceAdaptorEventDAO extends AbstractDO<SourceAdaptorEvent> {
  /**
   * No other instances other then in {@link DAO}.
   */
  protected SourceAdaptorEventDAO() {

  }

  /**
   * Get a source adaptor event by its Id.
   * 
   * @param sourceAdaptor
   *          The source adaptor that generated the event.
   * @param timestamp
   *          The event time stamp.
   * @return The unique event, or null if not found.
   */
  public SourceAdaptorEvent findById(final SourceAdaptor sourceAdaptor, final Date timestamp) {
    return super.findById(SourceAdaptorEvent.createId(sourceAdaptor, timestamp), SourceAdaptorEvent.class);
  }

  /**
   * Query for {@link SourceAdaptorEvent}.
   * 
   * @see #query(Class, String, int, int)
   * 
   * @param bindings
   *          The query bindings, see
   *          {@link AbstractDO#query(Class, String, int, int)}
   * @param start
   *          The index of the first item to retrieve
   * @param max
   *          The maximum number of items to retrieve
   * @return A list of {@link Measurement} filtered by the above constraints
   */
  public List<SourceAdaptorEvent> query(final String bindings, final int start, final int max) {
    return super.query(SourceAdaptorEvent.class, bindings, start, max);
  }

  /**
   * Count the results of a query for {@link SourceAdaptorEvent}.
   * 
   * @param bindings
   *          The query bindings, see {@link AbstractDO#count(Class, String)}
   * @return The number of results expected for the query
   */
  public int count(final String bindings) {
    return super.count(SourceAdaptorEvent.class, bindings);
  }

  /**
   * Get the query string for getting all events related to a source adaptor.
   * 
   * @param adaptor
   *          The source adaptor to which all events are related.
   * @return The query string.
   */
  private static String getListByAdaptorQueryString(final SourceAdaptor adaptor) {
    return "?s watch:adaptor " + SourceAdaptorDAO.getSourceAdaptorRDFId(adaptor);
  }

  /**
   * Get all events related to a source adaptor.
   * 
   * @param adaptor
   *          The source adaptor from which we want all related events.
   * @param start
   *          The start index from which the return list should start.
   * @param max
   *          The maximum number of items to return.
   * @return A list of the events generated by this source adaptor, filtered by
   *         above constraints.
   */
  public List<SourceAdaptorEvent> listByAdaptor(final SourceAdaptor adaptor, final int start, final int max) {
    return query(getListByAdaptorQueryString(adaptor), start, max);
  }

  /**
   * Count the number of events related to a source adaptor.
   * 
   * @param adaptor
   *          The related source adaptor.
   * @return The number of events taken by a source adaptor.
   */
  public int countByAdaptor(final SourceAdaptor adaptor) {
    return count(getListByAdaptorQueryString(adaptor));
  }

  /**
   * Get the query string for getting all events related to a source.
   * 
   * @param source
   *          The external source from which all event are related with.
   * @return The query string.
   */
  private static String getListBySourceQueryString(final Source source) {
    return "?s watch:adaptor ?adaptor . ?adaptor watch:source " + SourceDAO.getSourceRDFId(source);
  }

  /**
   * Get all events related to a source.
   * 
   * @param source
   *          The source from which we want all related events.
   * @param start
   *          The start index from which the return list should start.
   * @param max
   *          The maximum number of items to return.
   * @return A list of the events generated by adaptors of this source, filtered
   *         by above constraints.
   */
  public List<SourceAdaptorEvent> listBySource(final Source source, final int start, final int max) {
    return query(getListBySourceQueryString(source), start, max);
  }

  /**
   * Count the number of events related to a source.
   * 
   * @param source
   *          The related source.
   * @return The number of events generated by adaptors related to that source.
   */
  public int countBySource(final Source source) {
    return count(getListBySourceQueryString(source));
  }
}
